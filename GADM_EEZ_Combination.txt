
import arcpy, os, re, numpy
import pandas as pd
from numpy.lib import recfunctions
arcpy.SetLogHistory(True) 


# Identify the Countries that have a coastline please note, all countries are in twice as the loop seems to be only working on every second run through
Coastal_Countries = ['ABW', 'AGO', 'AIA', 'ALB', 'ARE', 'ARG', 'ASM', 'ATA', 'ATF', 'ATG', 'AUS', 'AZE', 'BEL', 'BEN', 'BES', 'BGD', 'BGR', 'BHR', 'BHS', 'BIH', 'BLM', 'BLZ', 'BMU', 'BRA', 'BRB', 'BRN', 'BVT', 'CAN', 'CCK', 'CHL', 'CHN', 'CIV', 'CMR', 'COD', 'COG', 'COK', 'COL', 'COM', 'CPV', 'CRI', 'CUB', 'CUW', 'CXR', 'CYM', 'CYP', 'DEU', 'DJI', 'DMA', 'DNK', 'DOM', 'DZA', 'ECU', 'EGY', 'ERI', 'ESH', 'ESP', 'EST', 'FIN', 'FJI', 'FLK', 'FRA', 'FRO', 'FSM', 'GAB', 'GBR', 'GEO', 'GGY', 'GHA', 'GIB', 'GIN', 'GLP', 'GMB', 'GNB', 'GNQ', 'GRC', 'GRD', 'GRL', 'GTM', 'GUF', 'GUM', 'GUY', 'HMD', 'HND', 'HRV', 'HTI', 'IDN', 'IND', 'IOT', 'IRL', 'IRN', 'IRQ', 'ISL', 'ISR', 'ITA', 'JAM', 'JEY', 'JOR', 'JPN', 'KAZ', 'KEN', 'KHM', 'KIR', 'KNA', 'KOR', 'KWT', 'LBN', 'LBR', 'LBY', 'LCA', 'LKA', 'LTU', 'LVA', 'MAF', 'MAR', 'MCO', 'MDG', 'MDV', 'MEX', 'MHL', 'MLT', 'MMR', 'MNE', 'MNP', 'MOZ', 'MRT', 'MSR', 'MTQ', 'MUS', 'MYS', 'MYT', 'NAM', 'NCL', 'NFK', 'NGA', 'NIC', 'NIU', 'NLD', 'NOR', 'NRU', 'NZL', 'OMN', 'PAK', 'PAN', 'PCN', 'PER', 'PHL', 'PLW', 'PNG', 'POL', 'PRI', 'PRK', 'PRT', 'PSE', 'PYF', 'QAT', 'REU', 'ROU', 'RUS', 'SAU', 'SDN', 'SEN', 'SGP', 'SGS', 'SHN', 'SJM', 'SLB', 'SLE', 'SLV', 'SOM', 'SPM', 'STP', 'SUR', 'SVN', 'SWE', 'SXM', 'SYC', 'SYR', 'TCA', 'TGO', 'THA', 'TKL', 'TKM', 'TLS', 'TON', 'TTO', 'TUN', 'TUR', 'TUV', 'TWN', 'TZA', 'UKR', 'UMI', 'URY', 'USA', 'VCT', 'VEN', 'VGB', 'VIR', 'VNM', 'VUT', 'WLF', 'WSM', 'YEM', 'ZAF','ABW', 'AGO', 'AIA', 'ALB', 'ARE', 'ARG', 'ASM', 'ATA', 'ATF', 'ATG', 'AUS', 'AZE', 'BEL', 'BEN', 'BES', 'BGD', 'BGR', 'BHR', 'BHS', 'BIH', 'BLM', 'BLZ', 'BMU', 'BRA', 'BRB', 'BRN', 'BVT', 'CAN', 'CCK', 'CHL', 'CHN', 'CIV', 'CMR', 'COD', 'COG', 'COK', 'COL', 'COM', 'CPV', 'CRI', 'CUB', 'CUW', 'CXR', 'CYM', 'CYP', 'DEU', 'DJI', 'DMA', 'DNK', 'DOM', 'DZA', 'ECU', 'EGY', 'ERI', 'ESH', 'ESP', 'EST', 'FIN', 'FJI', 'FLK', 'FRA', 'FRO', 'FSM', 'GAB', 'GBR', 'GEO', 'GGY', 'GHA', 'GIB', 'GIN', 'GLP', 'GMB', 'GNB', 'GNQ', 'GRC', 'GRD', 'GRL', 'GTM', 'GUF', 'GUM', 'GUY', 'HMD', 'HND', 'HRV', 'HTI', 'IDN', 'IND', 'IOT', 'IRL', 'IRN', 'IRQ', 'ISL', 'ISR', 'ITA', 'JAM', 'JEY', 'JOR', 'JPN', 'KAZ', 'KEN', 'KHM', 'KIR', 'KNA', 'KOR', 'KWT', 'LBN', 'LBR', 'LBY', 'LCA', 'LKA', 'LTU', 'LVA', 'MAF', 'MAR', 'MCO', 'MDG', 'MDV', 'MEX', 'MHL', 'MLT', 'MMR', 'MNE', 'MNP', 'MOZ', 'MRT', 'MSR', 'MTQ', 'MUS', 'MYS', 'MYT', 'NAM', 'NCL', 'NFK', 'NGA', 'NIC', 'NIU', 'NLD', 'NOR', 'NRU', 'NZL', 'OMN', 'PAK', 'PAN', 'PCN', 'PER', 'PHL', 'PLW', 'PNG', 'POL', 'PRI', 'PRK', 'PRT', 'PSE', 'PYF', 'QAT', 'REU', 'ROU', 'RUS', 'SAU', 'SDN', 'SEN', 'SGP', 'SGS', 'SHN', 'SJM', 'SLB', 'SLE', 'SLV', 'SOM', 'SPM', 'STP', 'SUR', 'SVN', 'SWE', 'SXM', 'SYC', 'SYR', 'TCA', 'TGO', 'THA', 'TKL', 'TKM', 'TLS', 'TON', 'TTO', 'TUN', 'TUR', 'TUV', 'TWN', 'TZA', 'UKR', 'UMI', 'URY', 'USA', 'VCT', 'VEN', 'VGB', 'VIR', 'VNM', 'VUT', 'WLF', 'WSM', 'YEM', 'ZAF']

# Sort so the countries are in alphabetical order
Coastal_Countries = sorted(Coastal_Countries)

#Set Index
i = 0

#Run While Loop to apply the same procedure to each Country
while  i <  len(Coastal_Countries):

#This has been left in so that the loop can be converted to a function to run on an individual country
#def CountryBoundary(i):

# set your own paths
	lwd      = 'C:/Users/OsgurM/Documents/ArcGIS/Projects/GADM_EEZ'    # local working directory
	gdb      = lwd+'/GADM_EEZ.gdb'             	#scratch file geodatabase (LOCAL)
	outdir   = lwd+'/Output' 					#Output location

	# set these variables and keep if running while loop
	Country = Coastal_Countries[i]
	i += 1	#Continue index
	
	#Unhash if using the function
	#Country = i
	
	# Displays the Country being run
	print(Country)

	# projections
	sr_mol = arcpy.SpatialReference('Mollweide (world)') # projected Mollweide (54009)

	# environment
	if not arcpy.Exists(gdb): arcpy.CreateFileGDB_management(os.path.dirname(gdb), os.path.basename(gdb))
	arcpy.env.workspace       = gdb
	arcpy.env.overwriteOutput = True
	arcpy.env.outputCoordinateSystem = sr_mol
	
	#Copy EEZ, GADM and EEZ Land Layer to a working location in this case a Working file geodatabase
	arcpy.management.MakeFeatureLayer(r"C:\Users\OsgurM\Documents\ArcGIS\Projects\GADM_EEZ\working.gdb\gadm36", "gadm", '', None, "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;UID UID VISIBLE NONE;GID_0 GID_0 VISIBLE NONE;ID_0 ID_0 VISIBLE NONE;NAME_0 NAME_0 VISIBLE NONE;GID_1 GID_1 VISIBLE NONE;ID_1 ID_1 VISIBLE NONE;NAME_1 NAME_1 VISIBLE NONE;VARNAME_1 VARNAME_1 VISIBLE NONE;NL_NAME_1 NL_NAME_1 VISIBLE NONE;HASC_1 HASC_1 VISIBLE NONE;CC_1 CC_1 VISIBLE NONE;TYPE_1 TYPE_1 VISIBLE NONE;ENGTYPE_1 ENGTYPE_1 VISIBLE NONE;VALIDFR_1 VALIDFR_1 VISIBLE NONE;VALIDTO_1 VALIDTO_1 VISIBLE NONE;REMARKS_1 REMARKS_1 VISIBLE NONE;GID_2 GID_2 VISIBLE NONE;ID_2 ID_2 VISIBLE NONE;NAME_2 NAME_2 VISIBLE NONE;VARNAME_2 VARNAME_2 VISIBLE NONE;NL_NAME_2 NL_NAME_2 VISIBLE NONE;HASC_2 HASC_2 VISIBLE NONE;CC_2 CC_2 VISIBLE NONE;TYPE_2 TYPE_2 VISIBLE NONE;ENGTYPE_2 ENGTYPE_2 VISIBLE NONE;VALIDFR_2 VALIDFR_2 VISIBLE NONE;VALIDTO_2 VALIDTO_2 VISIBLE NONE;REMARKS_2 REMARKS_2 VISIBLE NONE;GID_3 GID_3 VISIBLE NONE;ID_3 ID_3 VISIBLE NONE;NAME_3 NAME_3 VISIBLE NONE;VARNAME_3 VARNAME_3 VISIBLE NONE;NL_NAME_3 NL_NAME_3 VISIBLE NONE;HASC_3 HASC_3 VISIBLE NONE;CC_3 CC_3 VISIBLE NONE;TYPE_3 TYPE_3 VISIBLE NONE;ENGTYPE_3 ENGTYPE_3 VISIBLE NONE;VALIDFR_3 VALIDFR_3 VISIBLE NONE;VALIDTO_3 VALIDTO_3 VISIBLE NONE;REMARKS_3 REMARKS_3 VISIBLE NONE;GID_4 GID_4 VISIBLE NONE;ID_4 ID_4 VISIBLE NONE;NAME_4 NAME_4 VISIBLE NONE;VARNAME_4 VARNAME_4 VISIBLE NONE;CC_4 CC_4 VISIBLE NONE;TYPE_4 TYPE_4 VISIBLE NONE;ENGTYPE_4 ENGTYPE_4 VISIBLE NONE;VALIDFR_4 VALIDFR_4 VISIBLE NONE;VALIDTO_4 VALIDTO_4 VISIBLE NONE;REMARKS_4 REMARKS_4 VISIBLE NONE;GID_5 GID_5 VISIBLE NONE;ID_5 ID_5 VISIBLE NONE;NAME_5 NAME_5 VISIBLE NONE;CC_5 CC_5 VISIBLE NONE;TYPE_5 TYPE_5 VISIBLE NONE;ENGTYPE_5 ENGTYPE_5 VISIBLE NONE;REGION REGION VISIBLE NONE;VARREGION VARREGION VISIBLE NONE;zone zone VISIBLE NONE")
	arcpy.management.MakeFeatureLayer(r"C:\Users\OsgurM\Documents\ArcGIS\Projects\GADM_EEZ\working.gdb\EEZ_V10", "eez", '', None, "OBJECTID_1 OBJECTID_1 VISIBLE NONE;Shape Shape VISIBLE NONE;OBJECTID OBJECTID VISIBLE NONE;ISO_3digit ISO_3digit VISIBLE NONE;Country Country VISIBLE NONE;Changes Changes VISIBLE NONE;Shape_Leng Shape_Leng VISIBLE NONE;Shape_Length Shape_Length VISIBLE NONE;Shape_Area Shape_Area VISIBLE NONE")
	arcpy.management.MakeFeatureLayer(r"C:\Users\OsgurM\Documents\ArcGIS\Projects\GADM_EEZ\working.gdb\EEZ_land_v2_201410", "eezland_total", '', None, "OBJECTID_1 OBJECTID_1 VISIBLE NONE;Shape Shape VISIBLE NONE;OBJECTID OBJECTID VISIBLE NONE;ISO_3digit ISO_3digit VISIBLE NONE;Country Country VISIBLE NONE;Changes Changes VISIBLE NONE;Shape_Leng Shape_Leng VISIBLE NONE;Shape_Length Shape_Length VISIBLE NONE;Shape_Area Shape_Area VISIBLE NONE")

	# select any EEZ polygons associated with the country
	arcpy.analysis.Select("eez", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\eez_mol", "ISO_Ter1 LIKE '%s' Or ISO_Ter2 LIKE '%s' Or ISO_Ter3 LIKE '%s'" % (Country, Country, Country))	
	
	# Select the EEZ that is primarily associated with the Country
	arcpy.analysis.Select("eez", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\eez_imm", "ISO_Ter1 LIKE '%s'" % (Country))
	
	#Select all EEZ that aren part of this country
	arcpy.analysis.Select("eez", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\eez_erase", "ISO_Ter1 <> '%s'" % (Country))		
	
	#Select the Gadm boundaries for the Country
	arcpy.Select_analysis("gadm",    r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\gadm_Sub"   ,"GID_0 LIKE '%s'" % (Country))
	
	#Select the EEZ land join Layer for country in question
	arcpy.Select_analysis("eezland_total", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\eezland", " \"ISO_3digit\" = '%s'" % (Country))


	#Create a maximum working extent by joining eez, eezland and gadm layers together and dissolve 
	arcpy.analysis.Union("eez_imm #;eezland #; gadm_Sub", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\eez_Union", "ALL", None, "NO_GAPS")
	arcpy.management.Dissolve("eez_Union", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\eez_Union_Dissolve", None, None, "MULTI_PART", "DISSOLVE_LINES")

	#Dissolve Gadm Layer to identify states
	arcpy.analysis.PairwiseDissolve("gadm_sub", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\states", "GID_0;NAME_1;HASC_1", None, "SINGLE_PART")

	#Create single boundary for country assigned by gadm and buffer to identify any gaps between gadm and EEZ layers
	arcpy.analysis.PairwiseDissolve("gadm_sub", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\Country_diss", None, None, "MULTI_PART")
	arcpy.analysis.Buffer("Country_diss", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\Country_diss_Buffer", "5 Kilometers", "FULL", "ROUND", "NONE", None, "PLANAR")
	
	# create theissen polygons used to split slivers by densifying and turning boundary into points
	arcpy.edit.Densify("states", "DISTANCE", "1 Kilometers", "0.0000009 DecimalDegrees", 10)
	arcpy.management.FeatureVerticesToPoints("states", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\states_pts", "ALL")

	# delete interior points
	arcpy.management.SelectLayerByLocation("states_pts", "WITHIN_CLEMENTINI", "Country_diss", None, "NEW_SELECTION", "NOT_INVERT")
	arcpy.management.DeleteFeatures("states_pts")

	# generate thiessen polygons of gadm (dissolved to state level) for intersecting with land slivers
	arcpy.management.Merge("states;eez_imm", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\extent", 'GID_0 "GID_0" true true false 80 Text 0 0,First,#,states,GID_0,0,80;NAME_1 "NAME_1" true true false 80 Text 0 0,First,#,states,NAME_1,0,80;HASC_1 "HASC_1" true true false 80 Text 0 0,First,#,states,HASC_1,0,80;Shape_Length "Shape_Length" false true true 8 Double 0 0,First,#,states,Shape_Length,-1,-1,eez_imm,Shape_Length,-1,-1;Shape_Area "Shape_Area" false true true 8 Double 0 0,First,#,states,Shape_Area,-1,-1,eez_imm,Shape_Area,-1,-1;MRGID "MRGID" true true false 4 Long 0 0,First,#,eez_imm,MRGID,-1,-1;GeoName "GeoName" true true false 254 Text 0 0,First,#,eez_imm,GeoName,0,254;MRGID_Ter1 "MRGID_Ter1" true true false 4 Long 0 0,First,#,eez_imm,MRGID_Ter1,-1,-1;Pol_type "Pol_type" true true false 254 Text 0 0,First,#,eez_imm,Pol_type,0,254;MRGID_Sov1 "MRGID_Sov1" true true false 4 Long 0 0,First,#,eez_imm,MRGID_Sov1,-1,-1;Territory1 "Territory1" true true false 254 Text 0 0,First,#,eez_imm,Territory1,0,254;ISO_Ter1 "ISO_Ter1" true true false 254 Text 0 0,First,#,eez_imm,ISO_Ter1,0,254;Sovereign1 "Sovereign1" true true false 254 Text 0 0,First,#,eez_imm,Sovereign1,0,254;MRGID_Ter2 "MRGID_Ter2" true true false 4 Long 0 0,First,#,eez_imm,MRGID_Ter2,-1,-1;MRGID_Sov2 "MRGID_Sov2" true true false 4 Long 0 0,First,#,eez_imm,MRGID_Sov2,-1,-1;Territory2 "Territory2" true true false 254 Text 0 0,First,#,eez_imm,Territory2,0,254;ISO_Ter2 "ISO_Ter2" true true false 254 Text 0 0,First,#,eez_imm,ISO_Ter2,0,254;Sovereign2 "Sovereign2" true true false 254 Text 0 0,First,#,eez_imm,Sovereign2,0,254;MRGID_Ter3 "MRGID_Ter3" true true false 4 Long 0 0,First,#,eez_imm,MRGID_Ter3,-1,-1;MRGID_Sov3 "MRGID_Sov3" true true false 4 Long 0 0,First,#,eez_imm,MRGID_Sov3,-1,-1;Territory3 "Territory3" true true false 254 Text 0 0,First,#,eez_imm,Territory3,0,254;ISO_Ter3 "ISO_Ter3" true true false 254 Text 0 0,First,#,eez_imm,ISO_Ter3,0,254;Sovereign3 "Sovereign3" true true false 254 Text 0 0,First,#,eez_imm,Sovereign3,0,254;x_1 "x_1" true true false 8 Double 0 0,First,#,eez_imm,x_1,-1,-1;y_1 "y_1" true true false 8 Double 0 0,First,#,eez_imm,y_1,-1,-1;MRGID_EEZ "MRGID_EEZ" true true false 4 Long 0 0,First,#,eez_imm,MRGID_EEZ,-1,-1;Area_km2 "Area_km2" true true false 4 Long 0 0,First,#,eez_imm,Area_km2,-1,-1')
	arcpy.env.extent = 'extent'
	arcpy.analysis.CreateThiessenPolygons("states_pts", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\states_thiessen", "ALL")	
	arcpy.analysis.PairwiseDissolve("states_thiessen", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\theissen_mol", "GID_0;NAME_1;HASC_1", None, "SINGLE_PART")
	arcpy.management.RepairGeometry("theissen_mol", "DELETE_NULL", "OGC")
		
	# get slivers, which are land but not identified by gadm, intersect with thiessen so break at junctions
	arcpy.analysis.Erase("Country_diss_Buffer", "eez", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\Country_diss_Buffer_Erase", None)
	arcpy.analysis.Erase("Country_diss_Buffer_Erase", "gadm", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\landnotgadm", None)	
	
	#Assign slivers the county information for which they fall in
	arcpy.analysis.Intersect("landnotgadm #;theissen_mol #", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\slivers", "ALL", None, "INPUT")
	arcpy.analysis.PairwiseDissolve("slivers", r"C:\Users\OsgurM\Documents\ArcGIS\Projects\Data Mgmt\Data Mgmt.gdb\slivers_PD", "GID_0;NAME_1;HASC_1", None, "SINGLE_PART")	
	
	#Delete slivers identified that are not for the correct country and delete them
	arcpy.management.SelectLayerByLocation("slivers_PD", "INTERSECT", "extent", None, "NEW_SELECTION", "INVERT")
	arcpy.management.DeleteFeatures("slivers_PD")
	
	#Join the slivers with the states and add field which indicates that it is assigned to land
	arcpy.management.Merge("slivers_PD;states", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\state_slivers", 'GID_0 "GID_0" true true false 80 Text 0 0,First,#,slivers_PD,GID_0,0,80,states,GID_0,0,80;NAME_1 "NAME_1" true true false 80 Text 0 0,First,#,slivers_PD,NAME_1,0,80,states,NAME_1,0,80;HASC_1 "HASC_1" true true false 80 Text 0 0,First,#,slivers_PD,HASC_1,0,80,states,HASC_1,0,80;Shape_Length "Shape_Length" false true true 8 Double 0 0,First,#,slivers_PD,Shape_Length,-1,-1,states,Shape_Length,-1,-1;Shape_Area "Shape_Area" false true true 8 Double 0 0,First,#,slivers_PD,Shape_Area,-1,-1,states,Shape_Area,-1,-1', "NO_SOURCE_INFO")	
	arcpy.analysis.PairwiseDissolve("state_slivers", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\states_mol", "GID_0;NAME_1;HASC_1", None, "SINGLE_PART")
	arcpy.management.AddField("states_mol", "type", "TEXT", None, None, None, '', "NULLABLE", "NON_REQUIRED", '')
	arcpy.management.CalculateField("states_mol", "type", '"Land"', "PYTHON3", '')
	
	# get regions out to eez as full regions offshore and add field that identifies them as EEZ. (Some fields need renaming due to geoprocessing that occured earlier)
	arcpy.analysis.Intersect("eez_imm #;theissen_mol #", r"C:\Users\OsgurM\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\eez_imm_Local", "ALL", None, "INPUT")
	arcpy.analysis.PairwiseDissolve("eez_imm_Local", r"C:\Users\OsgurM\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\eez_imm_Local_PD", "GID_01;NAME_12;ISO_Ter1;ISO_Ter2;ISO_Ter3;HASC_12", None, "MULTI_PART")
	arcpy.management.AddField("eez_imm_Local_PD", "type", "TEXT", None, None, None, '', "NULLABLE", "NON_REQUIRED", '')
	arcpy.management.CalculateField("eez_imm_Local_PD", "type", '"EEZ"', "PYTHON3", '')
	arcpy.management.AlterField("eez_imm_Local_PD", "GID_01", "GID_0", "GID_0", "TEXT", 80, "NULLABLE", "DO_NOT_CLEAR")
	arcpy.management.AlterField("eez_imm_Local_PD", "HASC_12", "HASC_1", "HASC_1", "TEXT", 80, "NULLABLE", "DO_NOT_CLEAR")
	arcpy.management.AlterField("eez_imm_Local_PD", "NAME_12", "NAME_1", "NAME_1", "TEXT", 80, "NULLABLE", "DO_NOT_CLEAR")
	
	#Ensure no extra area is included by deleting anything that overlaps with gadm or EEZ that isnt assigned to the country
	arcpy.analysis.Erase("states_mol", "eez_imm_Local_PD", r"C:\Users\osgurm\Documents\ArcGIS\Projects\GADM_EEZ\GADM_EEZ.gdb\states_mol_Erase", None)
	arcpy.Merge_management(['states_mol_Erase', 'eez_imm_Local_PD'], 'Merged_Land_EEZ')
	
	#Merge the EEZ and LAnd layers which should now not overlap and allign with each other
	arcpy.analysis.Erase('Merged_Land_EEZ', "eez_erase", '%s/GADM_EEZ_%s.shp' % (outdir, Country), None)

	#Clean out the File Geodatabase each iteration to keep memory lower
	print("Finished")
	arcpy.Delete_management(gdb)
	
